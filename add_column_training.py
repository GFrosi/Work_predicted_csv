import pandas as pd 
import sys
import argparse

def load_df(file_csv):
    
    '''load a dataframe from a csv file'''

    df = pd.read_csv(file_csv)
        
    return df

def create_dicts(df1):

    """This function receives a df with cell_types as index and assays as columns.
    Each cell_type has a number of samples associated with each assay. The function
    will return two dicts. The first one will have the cell_types as keys
    and the list of number of samples for each assay as values. The second dict
    will have the assays as keys and its respective index as value"""

    #generating the first dict (CT:list of number of samples)
    df1.set_index('Cell type',inplace=True) #put CT as index to generate the keys
    dict_CT = df1.T.to_dict('list') #Transposing the table to create a list of number of samples
    
    #generating the second dict (assays:index)
    assays = df1.columns.tolist() #creating  list with assays to access the index
    dict_assay = {k:v for v,k in enumerate(assays)}
    
    
    return dict_CT, dict_assay

def new_column(df2, dict_CT, dict_assay):

    """This function receives a df with the predicted cell_type and predicted assay columns,
    and two dictionaries (cell_type and assay generated by the previous function.
    it will return a list of number of training samples for each sample in df2."""
    
    list_nb_samples = []
    
    for i, row in df2.iterrows():

        index = dict_assay[row['Predicted_ASSAY']]
        value = dict_CT[row['Predicted_CT']][index]
        list_nb_samples.append(value)
    
    return(list_nb_samples)


def add_column(df2, list_nb_samples):
    """This function receives a df and a list and will return a df
    with a new column"""

    df_final = df2.copy()
    df_final['nb_samples_learning'] = list_nb_samples

    return df_final


def save_df(df_final, path):

    '''Save df as csv file'''
              
    df_final.to_csv(path, index = False)




def main():

    df_train = load_df(args.file) #loading df train
    df_predict = load_df(args.FILE)
    dict_CT, dict_assay = create_dicts(df_train)
    nb_samples = new_column(df_predict, dict_CT, dict_assay)
    df_final = add_column(df_predict, nb_samples) 
    save_df(df_final, args.out)

if __name__ == "__main__":

    
    parser = argparse.ArgumentParser(
        description="A script to create a new column with the number of samples used per cell_type and target to train the EpiAtlas Neural Network for cell_type")


    parser.add_argument('-f', '--file', action="store", help='Path to csv with number of samples per cell_types and assay', required=True)
    parser.add_argument('-F', '--FILE', action="store", help='Path to csv with the MD5, predicted cell_type and predicted assay (those columns were generated by filter_max_value.py)', required=True)
    parser.add_argument('-o', '--out', action="store", help='Path to the final csv file with the new column', required=True)

    args = parser.parse_args()

    main()
